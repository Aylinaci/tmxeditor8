package net.heartsome.cat.te.tmxeditor.editor;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.Map.Entry;import net.heartsome.cat.common.ui.utils.OpenMessageUtils;import net.heartsome.cat.common.util.TextUtil;import net.heartsome.cat.te.core.TeCoreConstant;import net.heartsome.cat.te.core.bean.Property;import net.heartsome.cat.te.core.bean.TmxEditorFilterBean;import net.heartsome.cat.te.core.utils.TmxCustomFilterUtil;import net.heartsome.cat.te.tmxeditor.Activator;import net.heartsome.cat.te.tmxeditor.resource.Messages;import org.eclipse.core.runtime.IStatus;import org.eclipse.core.runtime.Status;import org.eclipse.jface.dialogs.Dialog;import org.eclipse.jface.dialogs.IDialogConstants;import org.eclipse.jface.layout.GridDataFactory;import org.eclipse.jface.layout.GridLayoutFactory;import org.eclipse.swt.SWT;import org.eclipse.swt.custom.ScrolledComposite;import org.eclipse.swt.custom.StackLayout;import org.eclipse.swt.events.ModifyEvent;import org.eclipse.swt.events.ModifyListener;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.graphics.Image;import org.eclipse.swt.layout.GridData;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Combo;import org.eclipse.swt.widgets.Composite;import org.eclipse.swt.widgets.Control;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Text;/** * 过滤器规则对话框，即创建或修改自定义过滤器的对话框 * @author robert	2013-06-17 * */public class FilterRegularDialog extends Dialog{	private Image addImg;	private Image deleteImg;		private Text nameTxt;	/** 满足所有条件　的按钮 */	private Button fitAllBtn;	/** 满足任何一个条件　的按钮 */	private Button fitAnyoneBtn;		private ScrolledComposite scroll;	private Composite regularParentCmp;	private GridData buttonData;	private GridData comboData;	/** 对象选择框填充内容的保存集合，<span style='color:red'>map 中的key 与　.filter.xml 中的节点相对应。	 * 如：<source><item type="include">test</item></source>。该值最好不要修改，除非需求变更</span> */	private Map<String, String> targetItemMap = new LinkedHashMap<String, String>();	/** 操作方法选择框填充内容的保存集合，<span style='color:red'>map 中的key 与　.filter.xml 中的 type 属性相对应。	 * 如：<source><item type="include">test</item></source>。该值最好不要修改，除非需求变更</span> */	private Map<String, String> typeItemMap = new LinkedHashMap<String, String>();			private TmxEditorFilterBean curBean;		public FilterRegularDialog(Shell parentShell) {		super(parentShell);		addImg = Activator.getImageDescriptor("images/addSign.png").createImage();		deleteImg = Activator.getImageDescriptor("images/deleteSign.png").createImage();		// "源文", "译文", "批注", "固定属性", "自定义属性"		targetItemMap.put("source", Messages.getString("tmxeditor.filterRegularDialog.source"));		targetItemMap.put("target", Messages.getString("tmxeditor.filterRegularDialog.target"));		targetItemMap.put("note", Messages.getString("tmxeditor.filterRegularDialog.note"));		targetItemMap.put("fixedProp", Messages.getString("tmxeditor.filterRegularDialog.fixAttribute"));		targetItemMap.put("customProp", Messages.getString("tmxeditor.filterRegularDialog.customAttribute"));				// "包含", "不包含", "等于", "不等于"		typeItemMap.put(TeCoreConstant.FILTER_TYPE_include, Messages.getString("tmxeditor.filterRegularDialog.contains"));		typeItemMap.put(TeCoreConstant.FILTER_TYPE_notInclude, Messages.getString("tmxeditor.filterRegularDialog.notcontains"));		typeItemMap.put(TeCoreConstant.FILTER_TYPE_equal, Messages.getString("tmxeditor.filterRegularDialog.equal"));		typeItemMap.put(TeCoreConstant.FILTER_TYPE_notEqual, Messages.getString("tmxeditor.filterRegularDialog.notequal"));			}		public FilterRegularDialog(Shell parentShell, TmxCustomFilterUtil filterUtil, TmxEditorFilterBean bean){		this(parentShell);		this.curBean = bean;	}		@Override	protected void configureShell(Shell newShell) {		super.configureShell(newShell);		if (curBean == null) {			newShell.setText(Messages.getString("tmxeditor.filterRegularDialog.add_filter_rules"));		}else {			newShell.setText(Messages.getString("tmxeditor.filterRegularDialog.edit_filer_rules"));		}	}		@Override	protected boolean isResizable() {		return true;	}		@Override	protected void createButtonsForButtonBar(Composite parent) {		super.createButtonsForButtonBar(parent);		Button okBtn = getButton(IDialogConstants.OK_ID);		okBtn.setText(Messages.getString("tmxeditor.all.dialog.okBtn"));		Button cancelBtn = getButton(IDialogConstants.CANCEL_ID);		cancelBtn.setText(Messages.getString("tmxeditor.all.dialog.cancelBtn"));	}	@Override	public boolean close() {		if (addImg != null && !addImg.isDisposed()) {			addImg.dispose();		}		if (deleteImg != null && !deleteImg.isDisposed()) {			deleteImg.dispose();		}		return super.close();	}		public TmxEditorFilterBean getCurBean() {		return curBean;	}	public void setCurBean(TmxEditorFilterBean curBean) {		this.curBean = curBean;	}	@Override	protected Control createDialogArea(Composite parent) {		Composite tParent = (Composite)super.createDialogArea(parent);		GridData parentData = new GridData(SWT.FILL, SWT.FILL, true, true);		parentData.widthHint = 650;		parentData.heightHint = 400;		tParent.setLayoutData(parentData);				// 显示名称		Composite nameCmp = new Composite(tParent, SWT.NONE);		GridDataFactory.swtDefaults().align(SWT.FILL, SWT.CENTER).grab(true, false).applyTo(nameCmp);		GridLayoutFactory.swtDefaults().numColumns(2).applyTo(nameCmp);				Label nameLbl = new Label(nameCmp, SWT.NONE);		nameLbl.setText(Messages.getString("tmxeditor.filterRegularDialog.filterName"));				nameTxt = new Text(nameCmp, SWT.BORDER);		nameTxt.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));				// 设置选项		Composite radioCmp = new Composite(tParent, SWT.NONE);		GridDataFactory.swtDefaults().align(SWT.FILL, SWT.CENTER).grab(true, false).applyTo(radioCmp);		GridLayoutFactory.swtDefaults().numColumns(2).applyTo(radioCmp);				fitAllBtn = new Button(radioCmp, SWT.RADIO);		fitAllBtn.setText(Messages.getString("tmxeditor.filterRegularDialog.fullFillAllCondition"));		fitAllBtn.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));		fitAllBtn.setSelection(true);				fitAnyoneBtn = new Button(radioCmp, SWT.RADIO);		fitAnyoneBtn.setText(Messages.getString("tmxeditor.filterRegularDialog.fullfillOneCondition"));		fitAnyoneBtn.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));				scroll = new ScrolledComposite(tParent, SWT.V_SCROLL);		scroll.setLayoutData(new GridData(GridData.FILL_BOTH));		scroll.setExpandHorizontal(true);		scroll.setExpandVertical(true);				regularParentCmp = new Composite(scroll, SWT.BORDER);		GridDataFactory.fillDefaults().grab(true, false).applyTo(regularParentCmp);		GridLayoutFactory.fillDefaults().spacing(0, 0).numColumns(1).applyTo(regularParentCmp);				scroll.setContent(regularParentCmp);				buttonData = new GridData(SWT.RIGHT, SWT.CENTER, false, false);		buttonData.widthHint = 50;				comboData = new GridData(SWT.FILL, SWT.CENTER, true, false);		comboData.widthHint = 100;				if (curBean == null) {			createRegularCmp(regularParentCmp);		}else {			initRegularCmp();		}				return tParent;	}		@Override	protected void okPressed() {		// 首先判断过滤器名称是否为空		String filterName = nameTxt.getText().trim();		if (filterName.isEmpty()) {			OpenMessageUtils.openMessage(IStatus.WARNING, Messages.getString("tmxeditor.filterRegularDialog.warn.msg1"));			return;		}		// 是否满足所有条件		boolean fitAll = fitAllBtn.getSelection();				TmxEditorFilterBean bean = new TmxEditorFilterBean();				// 开始遍历每个面板，获取出数据		List<Property> srcFilterList = new ArrayList<Property>();		List<Property> tgtFilterList = new ArrayList<Property>();		List<Property> noteFilterList = new ArrayList<Property>();		List<Property> fixedPropFilterList = new ArrayList<Property>();		List<Property> customPropFilterList = new ArrayList<Property>();				parentCmpFor:for (Control control : regularParentCmp.getChildren()) {			if (control instanceof Composite) {				Control[] children = ((Composite) control).getChildren();				String targetStr = "";	// 对象				String typeOrPropNameStr = "";	// 对象的处理类型或属性名				String content = "";	// 处理的值或属性值				// 处理第一列，即对象选择框				if (children[0] instanceof Combo) {					String text = ((Combo)children[0]).getText();					if (text == null || text.trim().isEmpty()) {						continue parentCmpFor;					}					for(Entry<String, String> entry : targetItemMap.entrySet()){						if (text.equals(entry.getValue())) {							targetStr = entry.getKey();							break;						}					}				}				if (targetStr == null || targetStr.isEmpty()) {					continue parentCmpFor;				}				if (!targetItemMap.keySet().contains(targetStr)) {					continue parentCmpFor;				}								// 处理第二列，获取对象的处理类型或者属性名				if (children[1] instanceof Composite) {					Composite cmp = ((Composite)children[1]);					Control typeOrNameControl = ((StackLayout)(cmp.getLayout())).topControl;					if (typeOrNameControl instanceof Combo) {						String text = ((Combo)typeOrNameControl).getText();						if (text == null || text.trim().isEmpty()) {							continue parentCmpFor;						}						for(Entry<String, String> entry : typeItemMap.entrySet()){							if (text.equals(entry.getValue())) {								typeOrPropNameStr = entry.getKey();								break;							}						}					}else if (typeOrNameControl instanceof Text) {						String text = ((Text)typeOrNameControl).getText();						if (text == null || text.trim().isEmpty()) {							continue parentCmpFor;						}						typeOrPropNameStr = text;					}				}				if (typeOrPropNameStr == null || typeOrPropNameStr.isEmpty()) {					continue parentCmpFor;				}								// 处理第三列，即处理内容，或者属性内容，针对<source><item type="include">test</item></source>　中的　test.				if (children[2] instanceof Text) {					content = ((Text)children[2]).getText();					if (content == null || content.isEmpty()) {						continue parentCmpFor;					}				}								// 将这个小项添加到对应的　集合中				if ("source".equals(targetStr)) {					srcFilterList.add(new Property(typeOrPropNameStr, content));				}else if ("target".equals(targetStr)) {					tgtFilterList.add(new Property(typeOrPropNameStr, content));				}else if ("note".equals(targetStr)) {					noteFilterList.add(new Property(typeOrPropNameStr, content));				}else if ("fixedProp".equals(targetStr)) {					fixedPropFilterList.add(new Property(typeOrPropNameStr, content));				}else if ("customProp".equals(targetStr)) {					customPropFilterList.add(new Property(typeOrPropNameStr, content));				}			}		}				if (curBean == null) {			bean.setId(TextUtil.createUUID());		}else {			bean.setId(curBean.getId());		}		// 如果过滤器未设置内容，则无法保存		if (srcFilterList.size() <= 0 && tgtFilterList.size() <= 0 && noteFilterList.size() <= 0				&& fixedPropFilterList.size() <= 0 && customPropFilterList.size() <= 0) {			OpenMessageUtils.openMessage(Status.INFO, Messages.getString("tmxeditor.filterRegularDialog.okpress.contentNull"));			return;		}				bean.setName(filterName);		bean.setFitAll(fitAll);		bean.setUseable(false);		bean.setCustom(true);		bean.setSrcFilter(srcFilterList);		bean.setTgtFilter(tgtFilterList);		bean.setNoteFilter(noteFilterList);		bean.setFixedPropFilter(fixedPropFilterList);		bean.setCustomPropFilter(customPropFilterList);				curBean = bean;		super.okPressed();	}		/**	 * 针对编辑，将　curBean 转换成界面组件。	 */	private void initRegularCmp(){		nameTxt.setText(curBean.getName());		if (curBean.isFitAll()) {			fitAllBtn.setSelection(true);			fitAnyoneBtn.setSelection(false);		}else {			fitAllBtn.setSelection(false);			fitAnyoneBtn.setSelection(true);		}						for(Property property : curBean.getSrcFilter()){			Composite composite = createRegularCmp(regularParentCmp);			initTargetCmbo("source", property, composite);		}		for(Property property : curBean.getTgtFilter()){			Composite composite = createRegularCmp(regularParentCmp);			initTargetCmbo("target", property, composite);		}		for(Property property : curBean.getNoteFilter()){			Composite composite = createRegularCmp(regularParentCmp);			initTargetCmbo("note", property, composite);		}		for(Property property : curBean.getFixedPropFilter()){			Composite composite = createRegularCmp(regularParentCmp);			initTargetCmbo("fixedProp", property, composite);		}		for(Property property : curBean.getCustomPropFilter()){			Composite composite = createRegularCmp(regularParentCmp);			initTargetCmbo("customProp", property, composite);		}	}		/**	 * 初始化第一列	 * @param targetKey		处理对象的标识符，见　targetItemMap　的　key 值	 * @param regualrCmp	 */	private void initTargetCmbo(String targetKey, Property property, Composite regualrCmp){		String[] targetMapArray = targetItemMap.keySet().toArray(new String[]{});		String[] typeMapArray = typeItemMap.keySet().toArray(new String[]{});				int index = -1;		Control[] children = regualrCmp.getChildren();		Control control = null;		// 处理第一个，处理对象		control = children[0];		for (int i = 0; i < targetMapArray.length; i++) {			if (targetKey.equals(targetMapArray[i])) {				index = i;				break;			}		}		if (index == -1) {			return;		}		((Combo)control).select(index);				// 处理第二列，当前处理对象的处理类型　或　属性的名称		if (children[1] instanceof Composite) {			Composite typeOrNameCmp = (Composite) children[1];			Control typeOrNameControl = ((StackLayout)(typeOrNameCmp.getLayout())).topControl;			if (typeOrNameControl instanceof Combo) {				for (int i = 0; i < typeMapArray.length; i++) {					if (property.getKey().equals(typeMapArray[i])) {						index = i;						break;					}				}				if (index == -1) {					return;				}				((Combo)typeOrNameControl).select(index);			}else if (typeOrNameControl instanceof Text) {				((Text)typeOrNameControl).setText(property.getKey());			}		}else {			return;		}		// 处理第三列，当前处理的处理内容　或者　属性值		if ((control = children[2]) instanceof Text) {			((Text)control).setText(property.getValue());		}			}		private Composite createRegularCmp(final Composite regularParentCmp){		final Composite regularCmp = new Composite(regularParentCmp, SWT.NONE);		GridDataFactory.fillDefaults().grab(true, false).applyTo(regularCmp);		GridLayoutFactory.fillDefaults().numColumns(5).applyTo(regularCmp);				// 对象选择框，		final Combo targetCmb = new Combo(regularCmp, SWT.READ_ONLY);		targetCmb.setItems(targetItemMap.values().toArray(new String[]{}));		targetCmb.setLayoutData(comboData);				// 这是一个面板。里面保存两个组件，若　对象选择框　选择　“固定属性”、“自定义属性”　后，这个面板显示为输入框		final Composite operateCmp = new Composite(regularCmp, SWT.NONE);		GridDataFactory.swtDefaults().align(SWT.FILL, SWT.CENTER).grab(true, false).applyTo(operateCmp);		final StackLayout operateCmpLayout = new StackLayout();		operateCmpLayout.marginHeight = 0;		operateCmpLayout.marginWidth = 0;		operateCmp.setLayout(operateCmpLayout);				// -操作方法下拉框		final Combo operateCmb = new Combo(operateCmp, SWT.READ_ONLY);		operateCmb.setItems(typeItemMap.values().toArray(new String[]{}));		operateCmb.setLayoutData(comboData);				// -操作方法输入框		final Text operateTxt = new Text(operateCmp, SWT.BORDER);		operateTxt.setLayoutData(comboData);		operateCmpLayout.topControl = operateCmb;		operateCmp.layout();				final Text valueTxt = new Text(regularCmp, SWT.BORDER);		valueTxt.setLayoutData(comboData);				targetCmb.addModifyListener(new ModifyListener() {			@Override			public void modifyText(ModifyEvent e) {				if (targetCmb.getSelectionIndex() == 3 || targetCmb.getSelectionIndex() == 4) {					operateCmpLayout.topControl = operateTxt;					operateTxt.setLayoutData(comboData);					operateTxt.pack();					operateCmp.layout();					regularCmp.layout();					regularParentCmp.layout();				}else {					operateCmpLayout.topControl = operateCmb;					operateCmb.setLayoutData(comboData);					operateCmp.layout();					regularCmp.layout();					regularParentCmp.layout();				}			}		});				Button addBtn = new Button(regularCmp, SWT.NONE);		addBtn.setImage(addImg);		addBtn.setLayoutData(buttonData);		addBtn.addSelectionListener(new SelectionAdapter() {			@Override			public void widgetSelected(SelectionEvent e) {				createRegularCmp(regularParentCmp);				scroll.setMinSize(regularParentCmp.computeSize(SWT.DEFAULT, SWT.DEFAULT));				regularParentCmp.layout();				scroll.layout();			}		});				Button deleBtn = new Button(regularCmp, SWT.NONE);		deleBtn.setImage(deleteImg);		deleBtn.setLayoutData(buttonData);		deleBtn.addSelectionListener(new SelectionAdapter() {			@Override			public void widgetSelected(SelectionEvent e) {				if (e.getSource() instanceof Button) {					((Button)e.getSource()).getParent().dispose();					scroll.setMinSize(regularParentCmp.computeSize(SWT.DEFAULT, SWT.DEFAULT));					regularParentCmp.layout();					scroll.layout();					disableDeleButton();				}			}		});				regularParentCmp.layout();		enableDeleButton(deleBtn);		return regularCmp;	}			/**	 * 如果多个正则配置，就设置禁用的按钮可用	 *  ;	 */	private void enableDeleButton(Button deleBtn){		if (regularParentCmp.getChildren().length > 1) {			deleBtn.setEnabled(true);						//将第一个设置面板的删除按钮设成可用			Composite regularCmp = (Composite)regularParentCmp.getChildren()[0];			Control[] contrls = regularCmp.getChildren();			Button deleteBtn = (Button)contrls[4];			deleteBtn.setEnabled(true);		}else {			deleBtn.setEnabled(false);		}	}		/**	 * 如果只有一个正则配置，就禁用删除按钮	 *  ;	 */	private void disableDeleButton(){		if (regularParentCmp.getChildren().length == 1) {			Composite regularCmp = (Composite)regularParentCmp.getChildren()[0];			Control[] contrls = regularCmp.getChildren();			Button deleteBtn = (Button)contrls[4];			deleteBtn.setEnabled(false);		}	}	}