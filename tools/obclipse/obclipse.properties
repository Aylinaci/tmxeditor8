# Obclipse -- properties file
#
# Each here defined property or property given by the command line could be used 
# as placeholders inside other property values similar to the ant notation: ${propertyname}
# e.g.  workingDir=D:/dev/temp/build
#       applicationDirectory=${workingDir}/SmallTool
#baseDir=D:/development/git/translation-studio/tools/obclipse
#baseDir=/Volumes/iMac-User/Projects/hsgit/translation-studio/tools/obclipse
baseDir=/Users/Mac/r8PackGit/tePack/translation-studio/tools/obclipse

# java home directory
# e.g. C:/Programme/Java/jre1.5.0_14
#javaHome=${resourcesDir}/bin/x86_32/java/jdk1.6.0_20/jre
#javaHome=D:/Program Files/Java/jre6
javaHome=/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home

# application folder name
# specifies the sub directory of the application
#applicationFolderName=${projectName}
applicationFolderName=hste8

# configuration directory
# base directory for configuration files
configDir="${baseDir}/config"

# working directory
# base directory for working files
workingDir="${baseDir}/build"

# resources directory
# base directory for resources
resourcesDir="${baseDir}/resources"

# application directory
# base directory of the application to obfuscate
# e.g. D:/dev/builds/App1_RC4
#applicationDirectory=${workingDir}/${applicationFolderName}
#applicationDirectory=D:/HS_Product/0605U/repository
#applicationDirectory=/Users/felix_lu/Desktop/r8builds/0722U/repository
applicationDirectory=/Users/Mac/Desktop/te_pack/repository

# specify the plugins to obfuscate by the plugin ids or
# set to false to obfuscate all plugins starting with the application prefix
# e.g mfb2.tools;mfb2.utils
#applicationPlugins=mfb2.tools.small;mfb2.tools.big
applicationPlugins=false

# application prefix
# all plugins which start with this prefixes will be obfuscated
# e.g. mfb2.tools,mfb2.utils
#applicationPrefix=mfb2.tools,mfb2.utils
applicationPrefix=net.heartsome.cat.common,net.heartsome.cat.database,net.heartsome.cat.p2update,net.heartsome.cat.te,net.heartsome.xml

# subdirectories of each plugin which are used as library jars
# e.g. lib,res/lib
pluginLibSubDirs=lib

# keep ids inside the plugin.xml files
# possible used class names will not be replaced by the obfuscated class name
# e.g. id,point
keepPluginXmlIDs=id,point,commandId,categoryId,category

# keep ids inside the schema.exsd files
# possible used class names will not be replaced by the obfuscated class name
# e.g. id
keepSchemaExsdIDs=id

# keep ids inside the MANIFEST.MF files
# possible used class names will not be replaced by the obfuscated class name
# e.g. 
keepManifestMfIDs=Bundle-Activator,Bundle-SymbolicName

# additional text files to fix
# this files will be parsed completely for classes which starts with the 
# strings defined in the applicationPrefix property 
# format: pluginName1,path/To/File1,path/To/FileN;pluginName2,path/To/File1,path/To/FileN
# e.g. mfb2.tools.obclipse,configuration/file1.prop,configuration/file2.prop;mfb2.tools.obclipse.util,nls/configuration/file10.prop,nls/configuration/file20.prop
#additionalFilesToFix=mfb2.tools.big,res/ConfigPropertyView.xmi
additionalFilesToFix=heartsome.java.tools.plugin/META-INF/MANIFEST.MF;net.heartsome.cat.common.core/META-INF/MANIFEST.MF;net.heartsome.cat.common.ui/META-INF/MANIFEST.MF;net.heartsome.cat.common.ui.shield,plugin.xml,META-INF/MANIFEST.MF;net.heartsome.cat.common.ui.shield.help/META-INF/MANIFEST.MF;net.heartsome.cat.common.ui.shield.resources/META-INF/MANIFEST.MF;net.heartsome.cat.common.ui.shield.workbench/META-INF/MANIFEST.MF;net.heartsome.cat.database/META-INF/MANIFEST.MF;net.heartsome.cat.database.hsql/META-INF/MANIFEST.MF;net.heartsome.cat.database.mssql/META-INF/MANIFEST.MF;net.heartsome.cat.database.mysql/META-INF/MANIFEST.MF;net.heartsome.cat.database.oracle/META-INF/MANIFEST.MF;net.heartsome.cat.database.postgreSQL/META-INF/MANIFEST.MF;net.heartsome.cat.database.sqlite/META-INF/MANIFEST.MF;net.heartsome.cat.database.ui,plugin.xml,META-INF/MANIFEST.MF;net.heartsome.cat.p2update,plugin.xml,META-INF/MANIFEST.MF;net.heartsome.cat.te,plugin.xml,META-INF/MANIFEST.MF;net.heartsome.cat.te.core/META-INF/MANIFEST.MF;net.heartsome.cat.te.tmxeditor,plugin.xml,META-INF/MANIFEST.MF;net.heartsome.cat.te.ui,plugin.xml,META-INF/MANIFEST.MF;net.heartsome.cat.te.ui.help,plugin.xml,META-INF/MANIFEST.MF;net.heartsome.cat.thirdpartlibrary/META-INF/MANIFEST.MF;net.heartsome.cat.te.qa,plugin.xml,META-INF/MANIFEST.MF;net.heartsome.xml/META-INF/MANIFEST.MF;net.sourceforge.nattable.core/META-INF/MANIFEST.MF;org.eclipse.nebula.widgets.tablecombo/META-INF/MANIFEST.MF;

# package paths of the class files 
# full path or start of the package paths
# this is used to find class names inside the additional text files
# e.g. mfb2.tools,mfb2.utils
packagePaths=net.heartsome

# obfuscation temp directory
# this directory will be temporarily create inside the application/plugins directory
# for the output of the obfuscator
# it will be deleted after the successfully obfuscation and integration
obfuscatedTempDir=tmpOb

# obfuscated default package name 
# the base package for the obfuscated classes
# the obfuscator will place all obfuscated classes in this package 
# when the option for the default package is enabled by the obfuscator
# this directory will be added to the classpath and export path of each plugin
obDefaultPackageName=obClasses


#--- proguard specific parameters ---#

# proguard config file (*.pro)
# this file will be written by Oblcipse, and passed
# to the probuard obfuscator as config file
# it will include the proguard parameter file
## robert
obfuscatorConfigFile=${workingDir}/obfuscationConfig.pro

# proguard parameter file (*.pro)
# this file contains the basic settings for proguard
# especially the keep statements
# this file will be included into the proguard config file
# e.g. obfuscationParameter.pro
obfuscationParameterFile=${configDir}/${applicationFolderName}/obfuscationParameter.pro

# proguard mapping file name
# proguard parameter: -printmapping  
# proguard will write the original name to obfuscated name 
# mapping to this file (*.map)
# e.g. obfuscate.map
## robert
mappingFileName=${workingDir}/obfuscate.map

# proguard mapping file to apply for the obfuscation
# proguard parameter: -applymapping
# progard will reuse a previous mapping file, this is useful for incremental builds, e.g. plugin updates, patches
# e.g. ${configDir}/${applicationFolderName}/obfuscate_v1.map
## robert
mappingFileNameToApply=${configDir}/${applicationFolderName}/obfuscate.map

# proguard filter
# proguard will consider the files which are hit by this filter
# this filter is applied for each plugin
# e.g. (*.jar;mfb2/app/**,mfb2/tools/**)
proguardFilter=(*.jar;plugins/**,heartsome/**,net/heartsome/**,org/eclipse/ui/**)

# additional parameter for the obfuscatorConfigFile
# could be used for parameter which needs to have placeholders
# and so they could not be added to the obfuscationParameterFile
# e.g. -libraryjars "${resourcesDir}/annotations.jar",-include "${resourcesDir}/annotations.pro"
additionalProguardParameter=-libraryjars "${resourcesDir}/obfuscate/annotations.jar",-include "${resourcesDir}/obfuscate/annotations.pro",-libraryjars "${javaHome}/lib/jce.jar",-libraryjars "${resourcesDir}/${applicationFolderName}/log4j-1.2.15.jar",-libraryjars "${resourcesDir}/${applicationFolderName}/slf4j-api-1.5.8.jar",-libraryjars "${resourcesDir}/${applicationFolderName}/slf4j-log4j12-1.5.8.jar",-libraryjars "${resourcesDir}/${applicationFolderName}/junit.jar",-libraryjars "${resourcesDir}/${applicationFolderName}/hslibrary3.jar",-libraryjars "${resourcesDir}/${applicationFolderName}/xercesImpl.jar",-libraryjars "${resourcesDir}/${applicationFolderName}/resolver.jar"

#--- END proguard specific parameters ---#
